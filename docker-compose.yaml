version: '3.8'

services:
  minio:
    container_name: minio
    hostname: minio
    image: quay.io/minio/minio:RELEASE.2022-05-08T23-50-31Z
    command: server --console-address ":9001" /data/
    expose:
      - "9000"
      - "9001"
    networks:
      - s3      
    environment:
      MINIO_ACCESS_KEY: ${AWS_ACCESS_KEY_ID}        
      MINIO_SECRET_KEY: ${AWS_SECRET_ACCESS_KEY}
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
    volumes:
      - ./docker/minio/:/data

  nginx:
    build: 
      context: ./docker/nginx
      args:
          MLFLOW_USER: ${MLFLOW_TRACKING_USERNAME}
          MLFLOW_PASSWORD: ${MLFLOW_TRACKING_PASSWORD}
    container_name: nginx
    hostname: nginx
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
    ports:
      - "9010:9000"
      - "9011:9001"
      - "9014:5000"
    networks:
      - s3
    depends_on:
      - minio
      - mlflow

  db:
    container_name: postgres
    image: postgres
    restart: always
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      PGDATA: /data/postgres
    volumes:
      - postgres_db:/data/postgres
    ports:
      - "9012:5432"
    networks:
      - postgres

  pgadmin:
    container_name: pgadmin
    image: dpage/pgadmin4
    restart: always
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD}
    volumes:
       - ./docker/pgadmin/:/var/lib/pgadmin
    ports:
      - "9013:80"
    networks:
      - postgres

  mlflow:
    restart: always
    build: ./docker/mlflow
    image: mlflow_server
    container_name: mlflow_server
    # ports:
    #   - "9014:5000"
    networks:
      - postgres
      - s3
    environment:
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - MLFLOW_S3_ENDPOINT_URL=http://nginx:9000
      - MLFLOW_S3_IGNORE_TLS=true
    command: mlflow server --backend-store-uri postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db/${POSTGRES_DB} --default-artifact-root s3://${AWS_S3_BUCKET}/ --host 0.0.0.0

networks:
  s3:
    driver: bridge
  postgres:
    driver: bridge

volumes:
  postgres_db:
